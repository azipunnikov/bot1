import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from db import init_db, fetch_white_list_pairs, fetch_trade_params
from engine import DCAEngine

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å"), KeyboardButton(text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")],
        [KeyboardButton(text="‚è∏Ô∏è –ü–∞—É–∑–∞"), KeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å")],
        [KeyboardButton(text="üìÇ –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏"), KeyboardButton(text="‚úÖ Whitelist")],
        [KeyboardButton(text="‚öôÔ∏è –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")]
    ],
    resize_keyboard=True
)

MENU_TEXTS = {btn.text for row in main_menu.keyboard for btn in row}

def build_bot(dp: Dispatcher, bot: Bot, engine: DCAEngine):
    async def start_cmd(message: types.Message):
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

    async def main_handler(message: types.Message):
        txt = message.text

        if txt == "üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å":
            await engine.start(lambda m: message.answer(m))
            await message.answer("‚ñ∂Ô∏è –î–≤–∏–∂–æ–∫ –∑–∞–ø—É—â–µ–Ω.", reply_markup=main_menu); return

        if txt == "‚è∏Ô∏è –ü–∞—É–∑–∞":
            await engine.pause()
            await message.answer("‚è∏Ô∏è –ü–∞—É–∑–∞ DCA.", reply_markup=main_menu); return

        if txt == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
            await engine.stop()
            await engine.start(lambda m: message.answer(m))
            await message.answer("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–≤–∏–∂–∫–∞.", reply_markup=main_menu); return

        if txt == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å":
            await engine.stop()
            await message.answer("‚õî –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=main_menu); return

        if txt == "‚úÖ Whitelist":
            pairs = await fetch_white_list_pairs()
            text = "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç." if not pairs else "Whitelist ("+str(len(pairs))+"):\n" + "\n".join(pairs)
            await message.answer(text, reply_markup=main_menu); return

        if txt == "‚öôÔ∏è –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã":
            tp = await fetch_trade_params()
            if not tp:
                await message.answer("trade_params –ø—É—Å—Ç–æ.", reply_markup=main_menu); return
            lines = [f"{k}: {v}" for k, v in tp.items() if k != "id"]
            await message.answer("–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n" + "\n".join(lines), reply_markup=main_menu); return

        if txt == "üìÇ –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏":
            # –±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑ –ë–î (–ø–æ—Å–ª–µ reconcile –¥–≤–∏–∂–∫–∞ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã)
            from aiosqlite import connect
            async with connect("bot.db") as db:
                db.row_factory = lambda c, r: {"pair": r[0], "qty": r[1], "avg": r[2]}
                async with db.execute("SELECT pair, freeQuantity, averagePrice FROM symbols WHERE statusOrder='OPEN'") as cur:
                    rows = await cur.fetchall()
            if not rows:
                await message.answer("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.", reply_markup=main_menu)
            else:
                out = "\n".join([f"{r['pair']}: qty={r['qty']} avg={r['avg']}" for r in rows])
                await message.answer(out, reply_markup=main_menu)
            return

        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", reply_markup=main_menu)

    dp.message.register(start_cmd, CommandStart())
    dp.message.register(start_cmd, Command("menu"))
    dp.message.register(main_handler, F.text.in_(MENU_TEXTS))
